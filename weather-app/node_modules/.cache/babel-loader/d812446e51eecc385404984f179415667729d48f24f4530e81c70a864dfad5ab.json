{"ast":null,"code":"// API helper functions for local backend\nexport async function getCoordinates(city){const response=await fetch(\"/weather\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({city})});if(!response.ok){throw new Error(\"City not found.\");}const data=await response.json();// For demo purposes, generate coordinates based on city name\nconst lat=40.0+city.toLowerCase().split(\"\").reduce((a,b)=>a+b.charCodeAt(0),0)%1000/1000.0;const lon=-74.0+city.toLowerCase().split(\"\").reverse().reduce((a,b)=>a+b.charCodeAt(0),0)%1000/1000.0;return{latitude:lat,longitude:lon};}export async function getWeather(latitude,longitude){// For demo purposes, generate weather data based on coordinates\nconst temperature=Math.round(15+latitude%10+longitude%5);return temperature;}","map":{"version":3,"names":["getCoordinates","city","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","lat","toLowerCase","split","reduce","a","b","charCodeAt","lon","reverse","latitude","longitude","getWeather","temperature","Math","round"],"sources":["C:/Users/IDAN/Weather-App/weather-app/src/components/WeatherDisplay.js"],"sourcesContent":["// API helper functions for local backend\r\n\r\nexport async function getCoordinates(city) {\r\n  const response = await fetch(\"/weather\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ city }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"City not found.\");\r\n  }\r\n\r\n  const data = await response.json();\r\n  // For demo purposes, generate coordinates based on city name\r\n  const lat =\r\n    40.0 +\r\n    (city\r\n      .toLowerCase()\r\n      .split(\"\")\r\n      .reduce((a, b) => a + b.charCodeAt(0), 0) %\r\n      1000) /\r\n      1000.0;\r\n  const lon =\r\n    -74.0 +\r\n    (city\r\n      .toLowerCase()\r\n      .split(\"\")\r\n      .reverse()\r\n      .reduce((a, b) => a + b.charCodeAt(0), 0) %\r\n      1000) /\r\n      1000.0;\r\n\r\n  return {\r\n    latitude: lat,\r\n    longitude: lon,\r\n  };\r\n}\r\n\r\nexport async function getWeather(latitude, longitude) {\r\n  // For demo purposes, generate weather data based on coordinates\r\n  const temperature = Math.round(15 + (latitude % 10) + (longitude % 5));\r\n  return temperature;\r\n}\r\n"],"mappings":"AAAA;AAEA,MAAO,eAAe,CAAAA,cAAcA,CAACC,IAAI,CAAE,CACzC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,UAAU,CAAE,CACvCC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEP,IAAK,CAAC,CAC/B,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,iBAAiB,CAAC,CACpC,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAClC;AACA,KAAM,CAAAC,GAAG,CACP,IAAI,CACHZ,IAAI,CACFa,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,EAAE,CAAC,CACTC,MAAM,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAAGC,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC,CACzC,IAAI,CACJ,MAAM,CACV,KAAM,CAAAC,GAAG,CACP,CAAC,IAAI,CACJnB,IAAI,CACFa,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,EAAE,CAAC,CACTM,OAAO,CAAC,CAAC,CACTL,MAAM,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAAGC,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC,CACzC,IAAI,CACJ,MAAM,CAEV,MAAO,CACLG,QAAQ,CAAET,GAAG,CACbU,SAAS,CAAEH,GACb,CAAC,CACH,CAEA,MAAO,eAAe,CAAAI,UAAUA,CAACF,QAAQ,CAAEC,SAAS,CAAE,CACpD;AACA,KAAM,CAAAE,WAAW,CAAGC,IAAI,CAACC,KAAK,CAAC,EAAE,CAAIL,QAAQ,CAAG,EAAG,CAAIC,SAAS,CAAG,CAAE,CAAC,CACtE,MAAO,CAAAE,WAAW,CACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}