{"ast":null,"code":"// API helper functions for local backend\n\nexport async function getCoordinates(city) {\n  const response = await fetch(\"/weather\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      city\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"City not found.\");\n  }\n  const data = await response.json();\n  // For demo purposes, generate coordinates based on city name\n  const lat = 40.0 + city.toLowerCase().split(\"\").reduce((a, b) => a + b.charCodeAt(0), 0) % 1000 / 1000.0;\n  const lon = -74.0 + city.toLowerCase().split(\"\").reverse().reduce((a, b) => a + b.charCodeAt(0), 0) % 1000 / 1000.0;\n  return {\n    latitude: lat,\n    longitude: lon\n  };\n}\nexport async function getWeather(latitude, longitude) {\n  // For demo purposes, generate weather data based on coordinates\n  const temperature = Math.round(15 + latitude % 10 + longitude % 5);\n  return temperature;\n}","map":{"version":3,"names":["getCoordinates","city","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","lat","toLowerCase","split","reduce","a","b","charCodeAt","lon","reverse","latitude","longitude","getWeather","temperature","Math","round"],"sources":["C:/Users/IDAN/Weather-App/weather-app/src/components/WeatherDisplay.js"],"sourcesContent":["// API helper functions for local backend\r\n\r\nexport async function getCoordinates(city) {\r\n  const response = await fetch(\"/weather\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ city }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"City not found.\");\r\n  }\r\n\r\n  const data = await response.json();\r\n  // For demo purposes, generate coordinates based on city name\r\n  const lat =\r\n    40.0 +\r\n    (city\r\n      .toLowerCase()\r\n      .split(\"\")\r\n      .reduce((a, b) => a + b.charCodeAt(0), 0) %\r\n      1000) /\r\n      1000.0;\r\n  const lon =\r\n    -74.0 +\r\n    (city\r\n      .toLowerCase()\r\n      .split(\"\")\r\n      .reverse()\r\n      .reduce((a, b) => a + b.charCodeAt(0), 0) %\r\n      1000) /\r\n      1000.0;\r\n\r\n  return {\r\n    latitude: lat,\r\n    longitude: lon,\r\n  };\r\n}\r\n\r\nexport async function getWeather(latitude, longitude) {\r\n  // For demo purposes, generate weather data based on coordinates\r\n  const temperature = Math.round(15 + (latitude % 10) + (longitude % 5));\r\n  return temperature;\r\n}\r\n"],"mappings":"AAAA;;AAEA,OAAO,eAAeA,cAAcA,CAACC,IAAI,EAAE;EACzC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,UAAU,EAAE;IACvCC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP;IAAK,CAAC;EAC/B,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAClC;EACA,MAAMC,GAAG,GACP,IAAI,GACHZ,IAAI,CACFa,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,EAAE,CAAC,CACTC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GACzC,IAAI,GACJ,MAAM;EACV,MAAMC,GAAG,GACP,CAAC,IAAI,GACJnB,IAAI,CACFa,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,EAAE,CAAC,CACTM,OAAO,CAAC,CAAC,CACTL,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GACzC,IAAI,GACJ,MAAM;EAEV,OAAO;IACLG,QAAQ,EAAET,GAAG;IACbU,SAAS,EAAEH;EACb,CAAC;AACH;AAEA,OAAO,eAAeI,UAAUA,CAACF,QAAQ,EAAEC,SAAS,EAAE;EACpD;EACA,MAAME,WAAW,GAAGC,IAAI,CAACC,KAAK,CAAC,EAAE,GAAIL,QAAQ,GAAG,EAAG,GAAIC,SAAS,GAAG,CAAE,CAAC;EACtE,OAAOE,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}